branches:
  only:
    - master
    - develop

sudo: false

os:
  - linux

env:
  - PY=3.7 PETSc=3.10.0
  - PY=3.6 PETSc=3.10.0 UPLOAD_DOCS=1

language: generic

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - gfortran
    - libblas-dev
    - liblapack-dev
    - libopenmpi-dev
    - openmpi-bin
    ssh_known_hosts:
    - web543.webfaction.com

cache:
  apt: true
  timeout: 300
  directories:
    - $HOME/.cache/pip
    - $HOME/miniconda

before_install:
# Check for existence of files to determine if cache exists
# If the dir doesn't exist, but is slated to be cached later,
# Travis unhelpfully creates it, which then causes "dir already exists"
# errors when you go to actually install the thing, so we must non-intuitively
# delete the file before re-creating it later.
- if [ -f $HOME/miniconda/envs/PY$PY ]; then
    echo "cached miniconda environment found";
    CACHED_ENV=1;
  else
    echo "cached miniconda environment not found";
    rm -rf $HOME/miniconda;
  fi

- if  [ "$TRAVIS_REPO_SLUG" = "OpenMDAO/dymos" ] && [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    MASTER_BUILD=1;
  fi

install:
# get key decrypted, placed, chmodded, and added for passwordless access to WebFaction
- if [ "$encrypted_4548f0b84c7d_key" ]; then
    openssl aes-256-cbc -K $encrypted_4548f0b84c7d_key -iv $encrypted_4548f0b84c7d_iv -in travis_deploy_rsa.enc -out /tmp/travis_deploy_rsa -d;
    eval "$(ssh-agent -s)";
    chmod 600 /tmp/travis_deploy_rsa;
    ssh-add /tmp/travis_deploy_rsa;
    echo -e "Host web543.webfaction.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config;
  fi

# if we have a cached miniconda environment then just activate the cached one, otherwise, build one
- if [ "$CACHED_ENV" ]; then
    echo "Using cached environment..."
    export PATH=$HOME/miniconda/bin:$PATH;
    source $HOME/miniconda/bin/activate PY$PY;
  else
    echo "Building python environment...";
    wget "https://repo.continuum.io/miniconda/Miniconda${PY:0:1}-latest-Linux-x86_64.sh" -O miniconda.sh;
    bash miniconda.sh -b -p $HOME/miniconda;
    source "$HOME/miniconda/etc/profile.d/conda.sh";
    hash -r;
    conda config --set always_yes yes --set changeps1 no;
    conda update -q conda;
    conda info -a;

    conda create --yes -n PY$PY python=$PY;
    conda activate PY$PY;
    conda config --add channels conda-forge;

    conda install --yes cython sphinx mock swig pip numpy=1.17.0 scipy=1.2.0 mpi4py matplotlib;
    sudo apt-get install gfortran;

    pip install --upgrade pip;
    pip install sqlitedict;
    pip install nose;
    pip install networkx;
    pip install testflo;
    pip install pyyaml;
    pip install coveralls;
    pip install --user travis-sphinx;

    git clone https://github.com/mdolab/pyoptsparse.git;
    cd pyoptsparse;

    if [ "$SNOPT_LOCATION" ] && [ "${PY:0:1}" = "3" ]; then
      cd pyoptsparse/pySNOPT;
      scp -r "$SNOPT_LOCATION" .;
      cd ../..;
    fi

    python setup.py build install;
    cd ..;

    git clone https://github.com/OpenMDAO/MBI.git;
    cd MBI;
    python setup.py build install;
    cd ..;

    if [ "$PETSc" ]; then
      echo " >> Installing parallel processing dependencies";
      conda install --yes petsc4py=$PETSc;
    fi

  fi

# install OpenMDAO in developer mode so we have access to its sphinx extensions
- git clone https://github.com/OpenMDAO/OpenMDAO.git;
- cd OpenMDAO;
- pip install -e .[all];
- cd ..;

# install dymos itself in developer mode.
- pip install -e .;

# display summary of installed packages and their versions
- conda list

script:
- export OMPI_MCA_rmaps_base_oversubscribe=1
- testflo -n 1 dymos --pre_announce --coverage --coverpkg dymos;
- testflo -b -n 1 benchmark --pre_announce
- if [ "$UPLOAD_DOCS" ]; then
    travis-sphinx build --source=dymos/docs;
  fi

after_success:
- if [ "$MASTER_BUILD" ] && [ "$UPLOAD_DOCS" ]; then
    travis-sphinx deploy;
  fi
- coveralls;
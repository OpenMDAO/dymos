branches:
  only:
  - master
  - develop

filter_secrets: false

os:
- linux

language: generic

env:
  matrix:
    # latest versions
    - PY=3   NUMPY=1    SCIPY=1   PYOPTSPARSE=v2.1.5 SNOPT=7.7 PETSc=3
    # baseline versions
    - PY=3.8 NUMPY=1.18 SCIPY=1.4 PYOPTSPARSE=v2.1.5 SNOPT=7.7 PETSc=3.12 UPLOAD_DOCS=1
    # older versions
    - PY=3.6 NUMPY=1.16 SCIPY=1.2 PYOPTSPARSE=v1.2   SNOPT=7.2 PETSc=3.10.2

git:
  depth: 99999

addons:
  apt:
    update: true
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - gfortran
    - gcc
    - g++
    - liblapack-dev
    ssh_known_hosts:
    - web543.webfaction.com

before_install:
# When building master (e.g. after a merge), we will create a fresh env as a thorough test.
# For other builds (e.g. pull requests), try to use cached env for faster testing.
# Need to check for existence of files to determine if cache exists.
# If the dir doesn't exist, but is slated to be cached later,
# Travis unhelpfully creates it, which then causes "dir already exists"
# errors when you go to actually install the thing, so we must non-intuitively
# delete the file before re-creating it later.
- if  [ "$TRAVIS_REPO_SLUG" = "OpenMDAO/OpenMDAO" ] && [ "$TRAVIS_BRANCH" = "master" ] && [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    echo "building master";
    MASTER_BUILD=1;
    rm -rf $HOME/miniconda;
  elif [ -d $HOME/miniconda/envs/PY$PY ]; then
    echo "cached miniconda environment found";
    CACHED_ENV=1;
  else
    echo "cached miniconda environment not found";
    rm -rf $HOME/miniconda;
  fi

install:
# get key decrypted, placed, chmodded, and added for passwordless access to WebFaction
- if [ "$encrypted_74d70a284b7d_key" ]; then
    openssl aes-256-cbc -K $encrypted_74d70a284b7d_key -iv $encrypted_74d70a284b7d_iv -in travis_deploy_rsa.enc -out /tmp/travis_deploy_rsa -d;
    eval "$(ssh-agent -s)";
    chmod 600 /tmp/travis_deploy_rsa;
    ssh-add /tmp/travis_deploy_rsa;
    echo -e "Host web543.webfaction.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config;
  else
    echo "KEY NOT FOUND";
  fi

# build Python environment
- |
  echo ">>> Building python environment";
  echo " >> Installing conda";
  echo "  > Downloading miniconda";
  wget "https://repo.anaconda.com/miniconda/Miniconda${PY:0:1}-latest-Linux-x86_64.sh" -O miniconda.sh;
  chmod +x miniconda.sh;
  echo "  > Installing miniconda";
  ./miniconda.sh -b  -p $HOME/miniconda;
  export PATH=$HOME/miniconda/bin:$PATH;

  echo " >> Creating conda environment";
  conda create --yes -n PY$PY python=$PY numpy=$NUMPY scipy=$SCIPY cython swig;
  source $HOME/miniconda/bin/activate PY$PY;

  pip install --upgrade pip;

  if [ "$PETSc" ]; then
    echo " >> Installing PETSc";
    conda install -c anaconda mpi4py --yes;
    conda install -c conda-forge petsc=$PETSc petsc4py --yes;
  fi

  if [ "$PYOPTSPARSE" ]; then
    echo " >> Installing pyOptSparse";
    git clone -q https://github.com/OpenMDAO/build_pyoptsparse;

    cd build_pyoptsparse;
    chmod 755 ./build_pyoptsparse.sh;

    if [ "$PETSc" ]; then
      PAROPT=-a;
    fi

    if [ "$SNOPT" == "7.7" ] && [ "$SNOPT_LOCATION_77" ]; then
      echo "  > Secure copying SNOPT 7.7 over SSH";
      mkdir SNOPT;
      scp -qr "$SNOPT_LOCATION_77" SNOPT;
      ./build_pyoptsparse.sh $PAROPT -b "$PYOPTSPARSE" -s SNOPT/src;

    elif [ "$SNOPT" == "7.2" ] && [ "$SNOPT_LOCATION_72" ]; then
      echo "  > Secure copying SNOPT 7.2 over SSH";
      mkdir SNOPT;
      scp -qr "$SNOPT_LOCATION_72" SNOPT;
      ./build_pyoptsparse.sh $PAROPT -b "$PYOPTSPARSE" -s SNOPT/source;

    else
      if [ "$SNOPT" ]; then
        echo "SNOPT version $SNOPT was requested but source is not available";
      fi
      ./build_pyoptsparse.sh $PAROPT -b "$PYOPTSPARSE";
    fi

    cd ..;
  fi

## install OpenMDAO and its development and documentation dependencies
## NOTE: not using -e on purpose here, to catch packaging errors
#- echo ">>> Installing OpenMDAO";
#  pip install .[all];
#  pyppeteer-install;
## install OpenMDAO in developer mode so we have access to its sphinx extensions
#- git clone https://github.com/OpenMDAO/OpenMDAO.git;
#- cd OpenMDAO;
#- pip install .[all];
#- cd ..;

# install dymos itself.
- echo $PWD;
- python -m pip install .[all];

# display summary of installed packages and their versions
- conda list

script:
# prevent OpenMPI warning messages
- export OMPI_MCA_btl=^openib
# newer versions of OpenMPI require this
- export OMPI_MCA_rmaps_base_oversubscribe=1
# IPOpt requires this
- export LD_LIBRARY_PATH=/home/travis/ipopt/lib

# run the tests from down here to see if it can work without being at top level
# only do coverage on the upload machine (and show skipped tests).
- if [ "$UPLOAD_DOCS" ]; then
    testflo -n 1 openmdao --timeout=120 --show_skipped --coverage  --coverpkg dymos
- cd mkdocs;
- mkdocs build --verbose --clean

after_success:
- cd ..;
- coveralls -v;

deploy:
  on:
    condition: $UPLOAD_DOCS = 1
    push:
      branches:
        - master
  provider: pages
  skip_cleanup: true
  github_token: $GITHUB_TOKEN
  keep_history: false
  local_dir: mkdocs/site
  committer_from_gh: true
  verbose: true

#
################
#
#branches:
#  only:
#    - master
#    - develop
#
#sudo: false
#
#os:
#  - linux
#
#env:
#  - PY=3.7 PETSc=3.10.0
#  - PY=3.6 PETSc=3.10.0 UPLOAD_DOCS=1
#
#language: generic
#
#addons:
#  apt:
#    sources:
#    - ubuntu-toolchain-r-test
#    packages:
#    - gfortran
#    - libblas-dev
#    - liblapack-dev
#    - libopenmpi-dev
#    - openmpi-bin
#    ssh_known_hosts:
#    - web543.webfaction.com
#
#cache:
#  apt: true
#  timeout: 300
#  directories:
#    - $HOME/.cache/pip
#    - $HOME/miniconda
#
#before_install:
## Check for existence of files to determine if cache exists
## If the dir doesn't exist, but is slated to be cached later,
## Travis unhelpfully creates it, which then causes "dir already exists"
## errors when you go to actually install the thing, so we must non-intuitively
## delete the file before re-creating it later.
#- if [ -f $HOME/miniconda/envs/PY$PY ]; then
#    echo "cached miniconda environment found";
#    CACHED_ENV=1;
#  else
#    echo "cached miniconda environment not found";
#    rm -rf $HOME/miniconda;
#  fi
#
#- if  [ "$TRAVIS_REPO_SLUG" = "OpenMDAO/dymos" ] && [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
#    MASTER_BUILD=1;
#  fi
#
#install:
## get key decrypted, placed, chmodded, and added for passwordless access to WebFaction
#- if [ "$encrypted_4548f0b84c7d_key" ]; then
#    openssl aes-256-cbc -K $encrypted_4548f0b84c7d_key -iv $encrypted_4548f0b84c7d_iv -in travis_deploy_rsa.enc -out /tmp/travis_deploy_rsa -d;
#    eval "$(ssh-agent -s)";
#    chmod 600 /tmp/travis_deploy_rsa;
#    ssh-add /tmp/travis_deploy_rsa;
#    echo -e "Host web543.webfaction.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config;
#  else
#    echo "KEY NOT FOUND";
#  fi
#
## if we have a cached miniconda environment then just activate the cached one, otherwise, build one
#- if [ "$CACHED_ENV" ]; then
#    echo "Using cached environment..."
#    export PATH=$HOME/miniconda/bin:$PATH;
#    source $HOME/miniconda/bin/activate PY$PY;
#  else
#    echo "Building python environment...";
#    wget -q "https://repo.continuum.io/miniconda/Miniconda${PY:0:1}-latest-Linux-x86_64.sh" -O miniconda.sh;
#    bash miniconda.sh -b -p $HOME/miniconda;
#    source "$HOME/miniconda/etc/profile.d/conda.sh";
#    hash -r;
#    conda config --set always_yes yes --set changeps1 no;
#    conda update -q conda;
#    conda info -a;
#
#    conda create --yes -n PY$PY python=$PY;
#    conda activate PY$PY;
#    conda config --add channels conda-forge;
#
#    conda install --yes cython sphinx mock swig pip numpy=1.18.1 scipy=1.4.1 mpi4py matplotlib;
#    sudo apt-get install gfortran;
#
#    python -m pip install --upgrade pip;
#    python -m pip install sqlitedict;
#    python -m pip install nose;
#    python -m pip install networkx;
#    python -m pip install testflo==1.3.6;
#    python -m pip install pyyaml;
#    python -m pip install coveralls;
#
#    echo "Clone the build_pyoptsparse script";
#    echo $PWD;
#    git clone https://github.com/OpenMDAO/build_pyoptsparse ./build_pyoptsparse.git;
#
#    if [ "$SNOPT_LOCATION" ]; then
#      echo "Install SNOPT";
#      cd build_pyoptsparse/pyoptsparse/pyoptsparse/pySNOPT;
#      scp -r "$SNOPT_LOCATION";
#      cd ../../../../;
#      echo $PWD;
#    fi
#
#    echo "Build pyoptsparse"
#    echo $PWD
#    cd build_pyoptsparse.git;
#    ls;
#    chmod 755 ./build_pyoptsparse_ipopt.sh;
#    ./build_pyoptsparse_ipopt.sh v2.1.5 SNOPT=7.7
#    cd ..;
#
#    echo "Build MBI"
#    echo $PWD"
#    git clone https://github.com/OpenMDAO/MBI.git;
#    cd MBI;
#    python setup.py build install;
#    cd ..;
#
#    if [ "$PETSc" ]; then
#      echo " >> Installing parallel processing dependencies";
#      conda install --yes petsc4py=$PETSc;
#    fi
#
#  fi
#
## install OpenMDAO in developer mode so we have access to its sphinx extensions
#- git clone https://github.com/OpenMDAO/OpenMDAO.git;
#- cd OpenMDAO;
#- pip install -e .[all];
#- cd ..;
#
## install dymos itself.
#- echo $PWD;
#- python -m pip install -e .[all];
#
## display summary of installed packages and their versions
#- conda list
#
#script:
## change to the dymos path and run unit tests
#- export LD_LIBRARY_PATH=/home/travis/ipopt/lib
#- export OMPI_MCA_rmaps_base_oversubscribe=1
#- dymos_path=$(python -c "import dymos as dm; import inspect; import pathlib; p=pathlib.PurePath(inspect.getfile(dm)).parent; print(p)" | tail -1);
#- testflo -n 1 $dymos_path --pre_announce --coverage --coverpkg dymos;
#- testflo -b -n 1 benchmark --pre_announce
## change to mkdocs path and build the documentation
#- cd mkdocs;
#- mkdocs build --verbose --clean
#
#after_success:
#- cd ..;
#- coveralls -v;
#
#deploy:
#  on:
#    condition: $UPLOAD_DOCS = 1
#    push:
#      branches:
#        - master
#  provider: pages
#  skip_cleanup: true
#  github_token: $GITHUB_TOKEN
#  keep_history: false
#  local_dir: mkdocs/site
#  committer_from_gh: true
#  verbose: true

branches:
  only:
    - master

sudo: false

os:
  - linux

language: generic

env:
  - PY=2.7 UPLOAD_DOCS=0
  - PY=3.6 UPLOAD_DOCS=1

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - gfortran
    - libblas-dev
    - liblapack-dev
    - libopenmpi-dev
    - openmpi-bin

jobs:
  include:
    - stage: before_install
      script:
        - sudo apt-get install gfortran
        - wget "https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh" -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b  -p /home/travis/miniconda;
        - PATHPREFIX="/home/travis/miniconda/bin";
        - export PATH=$PATHPREFIX:$PATH
        - export CWD=$(pwd)
        - conda create --yes -n test_env python=$PY swig sphinx
        - source activate test_env
        - pip install --upgrade pip
        - pip install numpy==1.14.1
        - pip install scipy==1.0.0
        - pip install matplotlib
        - pip install nose
        - pip install mock
        - pip install pip
        - pip install networkx
        - pip install testflo
        - pip install pyyaml

    - stage: install
      script:
        # install pyoptsparse
        - git clone https://github.com/mdolab/pyoptsparse.git;
        - cd pyoptsparse;
        # get SNOPT source, securely, if SNOPT_LOCATION is set.
        #- if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
        #    cd pyoptsparse/pySNOPT/source;
        #    scp -r "$SNOPT_LOCATION" .;
        #    cd ../../..;
        #  fi
        # return to building pyoptsparse
        - python setup.py build install;
        - cd ..;

        # install MBI
        - git clone https://github.com/OpenMDAO/MBI.git ./MBI.git;
        - cd MBI.git;
        - python setup.py build install;
        - cd ..;

        - pip install coveralls

        # install OpenMDAO in developer mode so we have access to its sphinx extensions
        - git clone https://github.com/OpenMDAO/OpenMDAO.git ./OpenMDAO.git;
        - cd OpenMDAO.git;
        - pip install -e .
        - cd ..;

        - pip install -e .

    - stage: test
      script:
          - ls
        # - testflo -n 1 dymos --pre_announce --coverage --coverpkg dymos

    - stage: docbuild
      script:
        - cd docs
        - make clean
        - make html
        - cd ..

#    - stage: after_success
#      - coveralls

    - stage: deploy
        provider: pages
        skip-cleanup: true
        local-dir: docs/build/html
        target-branch: gh-pages
        github-token: $GITHUB_TOKEN
        keep-history: false
        verbose: true
        on:
          branch: master
        if: $UPLOAD_DOCS = 1
# Run Tests

name: Dymos Tests

on:
  # Trigger on push or pull request events for the master branch
  push:
    branches: [ master, actions_ci ]
  pull_request:
    branches: [ master ]

jobs:

  test_ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 90

    strategy:
      fail-fast: false
      matrix:
        include:
          # baseline versions
          - PY: 3.8
            NUMPY: 1.18
            SCIPY: 1.4
            PETSc: 3.12
            PYOPTSPARSE: 'v2.1.5'
#            SNOPT: 7.7
            OPENMDAO: 'latest'
            OPTIONAL: '[all]'

          # try latest versions
          - PY: 3
            NUMPY: 1
            SCIPY: 1
            # PETSc: 3
            PYOPTSPARSE: 'v2.1.5'
#            SNOPT: 7.7
            OPENMDAO: 'latest'
            OPTIONAL: '[test]'

          # oldest supported versions
          - PY: 3.6
            NUMPY: 1.16
            SCIPY: 1.2
            PETSc: 3.10.2
            PYOPTSPARSE: 'v1.2'
#            SNOPT: 7.2
            OPENMDAO: 3.3.0
            OPTIONAL: '[all]'

    steps:
      # TEMPORARY WHILE GITHUB FIXES THIS https://github.com/actions/virtual-environments/issues/3185
      - name: Add the current IP address, long hostname and short hostname record to /etc/hosts file
        run: |
          echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts
#      - name: Create SSH key
#        shell: bash
#        env:
#          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
#          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
#        run: |
#          mkdir -p ~/.ssh/
#          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#          sudo chmod 600 ~/.ssh/id_rsa
#          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      - name: Checkout code
        uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow --tags
      - name: Install Dependencies
#        env:
#          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          COVERALLS_SERVICE_NAME: "github"
#          COVERALLS_PARALLEL: True
        run: |
          echo "=============================================================";
          echo "Run #${GITHUB_RUN_NUMBER}";
          echo "Run ID: ${GITHUB_RUN_ID}";
          echo "Testing: ${GITHUB_REPOSITORY}";
          echo "Triggered by: ${GITHUB_EVENT_NAME}";
          echo "Initiated by: ${GITHUB_ACTOR}";
          echo "=============================================================";
          echo "=============================================================";
          echo "Create conda environment";
          echo "=============================================================";
          source $CONDA/etc/profile.d/conda.sh;
          echo $CONDA/bin >> $GITHUB_PATH;
          conda create -n test_env python=${{ matrix.PY }} numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y;
          conda activate test_env;
          if [ "${{ matrix.PETSc }}" ]; then
            echo "=============================================================";
            echo "Install PETSc";
            echo "=============================================================";
            conda install -c anaconda mpi4py -q -y;
            conda install -c conda-forge petsc=${{ matrix.PETSc }} petsc4py -q -y;
          fi
          if [ "${{ matrix.PYOPTSPARSE }}" ]; then
            echo "=============================================================";
            echo "Install pyoptsparse";
            echo "=============================================================";
            git clone -q https://github.com/OpenMDAO/build_pyoptsparse;
            cd build_pyoptsparse;
            chmod 755 ./build_pyoptsparse.sh;
            if [ "${{ matrix.PETSc }}" ] && [ "${{ matrix.PYOPTSPARSE }}" == "v1.2"]; then
              PAROPT=-a;
            fi
            if [ "${{ matrix.SNOPT }}" == "7.7" ] && [ "${{ secrets.SNOPT_LOCATION_77 }}" ]; then
              echo "  > Secure copying SNOPT 7.7 over SSH";
              mkdir SNOPT;
              scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT;
              ./build_pyoptsparse.sh $PAROPT -b "${{ matrix.PYOPTSPARSE }}" -s SNOPT/src;
            elif [ "${{ matrix.SNOPT }}" == "7.2" ] && [ "${{ secrets.SNOPT_LOCATION_72 }}" ]; then
              echo "  > Secure copying SNOPT 7.2 over SSH";
              mkdir SNOPT;
              scp -qr ${{ secrets.SNOPT_LOCATION_72 }} SNOPT;
              ./build_pyoptsparse.sh $PAROPT -b "${{ matrix.PYOPTSPARSE }}" -s SNOPT/source;
            else
              if [ "${{ matrix.SNOPT }}" ]; then
                echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available";
              fi
              ./build_pyoptsparse.sh $PAROPT -b "${{ matrix.PYOPTSPARSE }}";
            fi
            cd ..;
            export LD_LIBRARY_PATH=$HOME/ipopt/lib;
          fi
          if [ "${{ matrix.OPENMDAO }}" ]; then
            echo "=============================================================";
            echo "Install OpenMDAO";
            echo "=============================================================";
            git clone -q https://github.com/OpenMDAO/OpenMDAO;
            pip install OpenMDAO
          fi
          echo "=============================================================";
          echo "Install Dymos";
          echo "=============================================================";
          conda activate test_env;
          pip install .${{ matrix.OPTIONAL }};
          echo "=============================================================";
          echo "Run Tests";
          echo "=============================================================";
          conda activate test_env;
          export LD_LIBRARY_PATH=$HOME/ipopt/lib;
          dymos_path=$(python -c "import dymos as dm; import inspect; import pathlib; p=pathlib.PurePath(inspect.getfile(dm)).parent; print(p)" | tail -1);
          export OMPI_MCA_rmaps_base_oversubscribe=1
          testflo $dymos_path -n 1 --show_skipped --coverage --coverpkg dymos;
          testflo -n 1 joss/test --pre_announce
          testflo -b benchmark --pre_announce

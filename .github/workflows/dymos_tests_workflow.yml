# Run Tests

name: Dymos Tests

on:
  # Trigger on push or pull request events for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  test_ubuntu:
    runs-on: ubuntu-latest

    timeout-minutes: 90

    strategy:
      fail-fast: false
      matrix:
        include:
          # baseline versions
          - PY: 3.8
            NUMPY: 1.18
            SCIPY: 1.4
            PETSc: 3.12
            PYOPTSPARSE: 'v2.1.5'
            SNOPT: 7.7
            MBI: 1
            OPENMDAO: 'latest'
            OPTIONAL: '[all]'
            DOCS: 1

          # try latest versions
          - PY: 3
            NUMPY: 1
            SCIPY: 1
            # PETSc: 3
            PYOPTSPARSE: 'v2.1.5'
            SNOPT: 7.7
            MBI: 1
            OPENMDAO: 'dev'
            OPTIONAL: '[test]'
            DOCS: 0

          # oldest supported versions
          - PY: 3.6
            NUMPY: 1.16
            SCIPY: 1.2
            PETSc: 3.10.2
            PYOPTSPARSE: 'v1.2'
            SNOPT: 7.2
            MBI: 1
            OPENMDAO: 3.13.0
            OPTIONAL: '[all]'
            DOCS: 0

    steps:
      - name: Display run details
        run: |
          echo "============================================================="
          echo "Run #${GITHUB_RUN_NUMBER}"
          echo "Run ID: ${GITHUB_RUN_ID}"
          echo "Testing: ${GITHUB_REPOSITORY}"
          echo "Triggered by: ${GITHUB_EVENT_NAME}"
          echo "Initiated by: ${GITHUB_ACTOR}"
          echo "============================================================="

      # TEMPORARY WHILE GITHUB FIXES THIS https://github.com/actions/virtual-environments/issues/3185
      - name: Add the current IP address, long hostname and short hostname record to /etc/hosts file
        run: |
          echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts

      - name: Create SSH key
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags

      - name: Install miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: test
          python-version: ${{ matrix.PY }}
          channels: conda-forge,spyder-ide
          allow-softlinks: true
          channel-priority: flexible
          show-channel-urls: true
          use-only-tar-bz2: true

      - name: Install Numpy/Scipy
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install Numpy/Scipy"
          echo "============================================================="
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y

      - name: Install PETSc
        if: matrix.PETSc
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install PETSc"
          echo "============================================================="
          conda install -c conda-forge mpi4py petsc=${{ matrix.PETSc }} petsc4py -q -y
          echo "OMPI_MCA_rmaps_base_oversubscribe=1" >> $GITHUB_ENV

      - name: Install pyOptSparse
        if: matrix.PYOPTSPARSE
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install pyoptsparse"
          echo "============================================================="
          git clone -q https://github.com/OpenMDAO/build_pyoptsparse
          cd build_pyoptsparse
          chmod 755 ./build_pyoptsparse.sh
          if [[ "${{ matrix.PETSc }}" && "${{ matrix.PYOPTSPARSE }}" == "v1.2" ]]; then
            PAROPT=-a
          fi
          if [[ "${{ matrix.SNOPT }}" == "7.7" && "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
            echo "  > Secure copying SNOPT 7.7 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT
            ./build_pyoptsparse.sh $PAROPT -b "${{ matrix.PYOPTSPARSE }}" -s SNOPT/src
          elif [[ "${{ matrix.SNOPT }}" == "7.2" && "${{ secrets.SNOPT_LOCATION_72 }}" ]]; then
            echo "  > Secure copying SNOPT 7.2 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_72 }} SNOPT
            ./build_pyoptsparse.sh $PAROPT -b "${{ matrix.PYOPTSPARSE }}" -s SNOPT/source
          else
            if [[ "${{ matrix.SNOPT }}" ]]; then
              echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available"
            fi
            ./build_pyoptsparse.sh $PAROPT -b "${{ matrix.PYOPTSPARSE }}"
          fi
          cd ..
          echo "LD_LIBRARY_PATH=$HOME/ipopt/lib" >> $GITHUB_ENV

      - name: Install MBI
        if: matrix.MBI
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install MBI"
          echo "============================================================="
          git clone -q https://github.com/OpenMDAO/MBI
          cd MBI
          pip install .

      - name: Install OpenMDAO
        if: matrix.OPENMDAO
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install OpenMDAO"
          echo "============================================================="
          if [[ "${{ matrix.OPENMDAO }}" == "dev" ]]; then
            pip install git+https://github.com/OpenMDAO/OpenMDAO
          elif [[ "${{ matrix.OPENMDAO }}" == "latest" ]]; then
            pip install openmdao
          else
            pip install openmdao==${{ matrix.OPENMDAO }}
          fi

      - name: Install optional dependencies
        if: matrix.OPTIONAL == '[all]'
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install additional packages for testing/coverage"
          echo "============================================================="
          pip install bokeh

      - name: Install Dymos
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Install Dymos"
          echo "============================================================="
          pip install .${{ matrix.OPTIONAL }}

      - name: Display conda info
        shell: bash -l {0}
        run: |
          conda info
          conda list

      - name: Run tests
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Run Tests"
          echo "============================================================="
          testflo -n 1 docs/test --pre_announce
          testflo -n 1 joss/test --pre_announce
          testflo -b benchmark --pre_announce
          cd $HOME
          testflo dymos -n 1 --show_skipped --coverage --coverpkg dymos

      - name: Submit coverage
        shell: bash -l {0}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: "github"
          COVERALLS_PARALLEL: True
        run: |
          echo "============================================================="
          echo "Submit coverage"
          echo "============================================================="
          cp $HOME/.coverage .
          pip install coveralls
          SITE_DIR=`python -c 'import site; print(site.getsitepackages()[-1])'`
          coveralls --basedir $SITE_DIR

      - name: Build docs
        if: ${{ matrix.DOCS == '1' }}
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Building Docs"
          echo "============================================================="
          pwd
          git clone -q https://github.com/executablebooks/jupyter-book
          cd jupyter-book
          pip install -e .
          cd ..
          jupyter-book build docs/

      - name: Publish docs
        if: ${{ matrix.DOCS == '1' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        shell: bash -l {0}
        run: |
          echo "============================================================="
          echo "Publishing Docs"
          echo "============================================================="
          pip install ghp-import
          cd $HOME/work/dymos/dymos
          pwd
          ghp-import -n -p -f docs/_build/html

  coveralls:
    name: Finish coveralls
    needs: test_ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true

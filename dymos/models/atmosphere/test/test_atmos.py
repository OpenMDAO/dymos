import unittest
import numpy as np

import openmdao.api as om
from openmdao.utils.assert_utils import assert_near_equal, assert_check_partials

from dymos.models.atmosphere.atmos_1976 import USatm1976Comp

# reference = np.array(
#     [[-3.00000E+03, 3.07650E+02, 1.42950E+05, 1.61870E+00, 3.51620E+02, 1.90792E-05],
#      [-2.00000E+03, 3.01150E+02, 1.27774E+05, 1.47808E+00, 3.47886E+02, 1.87630E-05],
#      [-1.00000E+03, 2.94650E+02, 1.13929E+05, 1.34700E+00, 3.44111E+02, 1.84434E-05],
#      [0.00000E+00, 2.88150E+02, 1.01325E+05, 1.22500E+00, 3.40294E+02, 1.81206E-05],
#      [1.00000E+03, 2.81650E+02, 8.98746E+04, 1.11164E+00, 3.36434E+02, 1.77943E-05],
#      [2.00000E+03, 2.75150E+02, 7.94952E+04, 1.00649E+00, 3.32529E+02, 1.74645E-05],
#      [3.00000E+03, 2.68650E+02, 7.01085E+04, 9.09122E-01, 3.28578E+02, 1.71311E-05],
#      [4.00000E+03, 2.62150E+02, 6.16402E+04, 8.19129E-01, 3.24579E+02, 1.67940E-05],
#      [5.00000E+03, 2.55650E+02, 5.40199E+04, 7.36116E-01, 3.20529E+02, 1.64531E-05],
#      [6.00000E+03, 2.49150E+02, 4.71810E+04, 6.59697E-01, 3.16428E+02, 1.61084E-05],
#      [7.00000E+03, 2.42650E+02, 4.10607E+04, 5.89501E-01, 3.12274E+02, 1.57596E-05],
#      [8.00000E+03, 2.36150E+02, 3.55998E+04, 5.25168E-01, 3.08063E+02, 1.54068E-05],
#      [9.00000E+03, 2.29650E+02, 3.07425E+04, 4.66348E-01, 3.03793E+02, 1.50498E-05],
#      [1.00000E+04, 2.23150E+02, 2.64363E+04, 4.12707E-01, 2.99463E+02, 1.46884E-05],
#      [1.10000E+04, 2.16650E+02, 2.26321E+04, 3.63918E-01, 2.95070E+02, 1.43226E-05],
#      [1.20000E+04, 2.16650E+02, 1.93304E+04, 3.10828E-01, 2.95070E+02, 1.43226E-05],
#      [1.30000E+04, 2.16650E+02, 1.65104E+04, 2.65483E-01, 2.95070E+02, 1.43226E-05],
#      [1.40000E+04, 2.16650E+02, 1.41018E+04, 2.26753E-01, 2.95070E+02, 1.43226E-05],
#      [1.50000E+04, 2.16650E+02, 1.20446E+04, 1.93674E-01, 2.95070E+02, 1.43226E-05],
#      [1.60000E+04, 2.16650E+02, 1.02875E+04, 1.65420E-01, 2.95070E+02, 1.43226E-05],
#      [1.70000E+04, 2.16650E+02, 8.78668E+03, 1.41288E-01, 2.95070E+02, 1.43226E-05],
#      [1.80000E+04, 2.16650E+02, 7.50484E+03, 1.20676E-01, 2.95070E+02, 1.43226E-05],
#      [1.90000E+04, 2.16650E+02, 6.41001E+03, 1.03071E-01, 2.95070E+02, 1.43226E-05],
#      [2.00000E+04, 2.16650E+02, 5.47489E+03, 8.80349E-02, 2.95070E+02, 1.43226E-05],
#      [2.10000E+04, 2.17650E+02, 4.67789E+03, 7.48737E-02, 2.95750E+02, 1.43792E-05],
#      [2.20000E+04, 2.18650E+02, 3.99979E+03, 6.37273E-02, 2.96428E+02, 1.44357E-05],
#      [2.30000E+04, 2.19650E+02, 3.42243E+03, 5.42803E-02, 2.97105E+02, 1.44920E-05],
#      [2.40000E+04, 2.20650E+02, 2.93049E+03, 4.62674E-02, 2.97781E+02, 1.45483E-05],
#      [2.50000E+04, 2.21650E+02, 2.51102E+03, 3.94658E-02, 2.98455E+02, 1.46044E-05],
#      [2.60000E+04, 2.22650E+02, 2.15309E+03, 3.36882E-02, 2.99128E+02, 1.46604E-05],
#      [2.70000E+04, 2.23650E+02, 1.84746E+03, 2.87769E-02, 2.99799E+02, 1.47164E-05],
#      [2.80000E+04, 2.24650E+02, 1.58629E+03, 2.45988E-02, 3.00468E+02, 1.47722E-05],
#      [2.90000E+04, 2.25650E+02, 1.36296E+03, 2.10420E-02, 3.01136E+02, 1.48279E-05],
#      [3.00000E+04, 2.26650E+02, 1.17187E+03, 1.80119E-02, 3.01803E+02, 1.48835E-05],
#      [3.10000E+04, 2.27650E+02, 1.00823E+03, 1.54288E-02, 3.02468E+02, 1.49390E-05],
#      [3.20000E+04, 2.28650E+02, 8.68019E+02, 1.32250E-02, 3.03131E+02, 1.49945E-05],
#      [3.30000E+04, 2.31450E+02, 7.48228E+02, 1.12620E-02, 3.04982E+02, 1.51491E-05],
#      [3.40000E+04, 2.34250E+02, 6.46122E+02, 9.60889E-03, 3.06821E+02, 1.53029E-05],
#      [3.50000E+04, 2.37050E+02, 5.58924E+02, 8.21392E-03, 3.08649E+02, 1.54559E-05],
#      [3.60000E+04, 2.39850E+02, 4.84317E+02, 7.03441E-03, 3.10467E+02, 1.56082E-05],
#      [3.70000E+04, 2.42650E+02, 4.20367E+02, 6.03513E-03, 3.12274E+02, 1.57596E-05],
#      [3.80000E+04, 2.45450E+02, 3.65455E+02, 5.18691E-03, 3.14070E+02, 1.59104E-05],
#      [3.90000E+04, 2.48250E+02, 3.18220E+02, 4.46557E-03, 3.15856E+02, 1.60603E-05],
#      [4.00000E+04, 2.51050E+02, 2.77522E+02, 3.85101E-03, 3.17633E+02, 1.62096E-05],
#      [4.10000E+04, 2.53850E+02, 2.42395E+02, 3.32648E-03, 3.19399E+02, 1.63581E-05],
#      [4.20000E+04, 2.56650E+02, 2.12030E+02, 2.87802E-03, 3.21156E+02, 1.65058E-05],
#      [4.30000E+04, 2.59450E+02, 1.85738E+02, 2.49393E-03, 3.22903E+02, 1.66529E-05],
#      [4.40000E+04, 2.62250E+02, 1.62937E+02, 2.16443E-03, 3.24641E+02, 1.67992E-05],
#      [4.50000E+04, 2.65050E+02, 1.43135E+02, 1.88129E-03, 3.26369E+02, 1.69449E-05],
#      [4.60000E+04, 2.67850E+02, 1.25910E+02, 1.63760E-03, 3.28088E+02, 1.70898E-05],
#      [4.70000E+04, 2.70650E+02, 1.10906E+02, 1.42753E-03, 3.29799E+02, 1.72341E-05],
#      [4.80000E+04, 2.70650E+02, 9.77545E+01, 1.25825E-03, 3.29799E+02, 1.72341E-05],
#      [4.90000E+04, 2.70650E+02, 8.61623E+01, 1.10904E-03, 3.29799E+02, 1.72341E-05],
#      [5.00000E+04, 2.70650E+02, 7.59448E+01, 9.77525E-04, 3.29799E+02, 1.72341E-05],
#      [5.10000E+04, 2.70650E+02, 6.69389E+01, 8.61606E-04, 3.29799E+02, 1.72341E-05],
#      [5.20000E+04, 2.67850E+02, 5.89622E+01, 7.66867E-04, 3.28088E+02, 1.70898E-05],
#      [5.30000E+04, 2.65050E+02, 5.18668E+01, 6.81710E-04, 3.26369E+02, 1.69449E-05],
#      [5.40000E+04, 2.62250E+02, 4.55632E+01, 6.05252E-04, 3.24641E+02, 1.67992E-05],
#      [5.50000E+04, 2.59450E+02, 3.99700E+01, 5.36684E-04, 3.22903E+02, 1.66529E-05],
#      [5.60000E+04, 2.56650E+02, 3.50137E+01, 4.75263E-04, 3.21156E+02, 1.65058E-05],
#      [5.70000E+04, 2.53850E+02, 3.06274E+01, 4.20311E-04, 3.19399E+02, 1.63581E-05],
#      [5.80000E+04, 2.51050E+02, 2.67509E+01, 3.71207E-04, 3.17633E+02, 1.62096E-05],
#      [5.90000E+04, 2.48250E+02, 2.33296E+01, 3.27382E-04, 3.15856E+02, 1.60603E-05],
#      [6.00000E+04, 2.45450E+02, 2.03143E+01, 2.88321E-04, 3.14070E+02, 1.59104E-05],
#      [6.10000E+04, 2.42650E+02, 1.76606E+01, 2.53550E-04, 3.12274E+02, 1.57596E-05],
#      [6.20000E+04, 2.39850E+02, 1.53287E+01, 2.22640E-04, 3.10467E+02, 1.56082E-05],
#      [6.30000E+04, 2.37050E+02, 1.32826E+01, 1.95200E-04, 3.08649E+02, 1.54559E-05],
#      [6.40000E+04, 2.34250E+02, 1.14900E+01, 1.70875E-04, 3.06821E+02, 1.53029E-05],
#      [6.50000E+04, 2.31450E+02, 9.92203E+00, 1.49342E-04, 3.04982E+02, 1.51491E-05],
#      [6.60000E+04, 2.28650E+02, 8.55275E+00, 1.30308E-04, 3.03131E+02, 1.49945E-05],
#      [6.70000E+04, 2.25850E+02, 7.35895E+00, 1.13510E-04, 3.01269E+02, 1.48390E-05],
#      [6.80000E+04, 2.23050E+02, 6.31992E+00, 9.87069E-05, 2.99396E+02, 1.46828E-05],
#      [6.90000E+04, 2.20250E+02, 5.41717E+00, 8.56830E-05, 2.97511E+02, 1.45258E-05],
#      [7.00000E+04, 2.17450E+02, 4.63422E+00, 7.42430E-05, 2.95614E+02, 1.43679E-05],
#      [7.10000E+04, 2.14650E+02, 3.95642E+00, 6.42110E-05, 2.93704E+02, 1.42092E-05],
#      [7.20000E+04, 2.12650E+02, 3.37176E+00, 5.52370E-05, 2.92333E+02, 1.40953E-05],
#      [7.30000E+04, 2.10650E+02, 2.86917E+00, 4.74496E-05, 2.90955E+02, 1.39810E-05],
#      [7.40000E+04, 2.08650E+02, 2.43773E+00, 4.07010E-05, 2.89570E+02, 1.38662E-05],
#      [7.50000E+04, 2.06650E+02, 2.06792E+00, 3.48607E-05, 2.88179E+02, 1.37510E-05],
#      [7.60000E+04, 2.04650E+02, 1.75140E+00, 2.98135E-05, 2.86781E+02, 1.36353E-05],
#      [7.70000E+04, 2.02650E+02, 1.48092E+00, 2.54579E-05, 2.85377E+02, 1.35192E-05],
#      [7.80000E+04, 2.00650E+02, 1.25012E+00, 2.17046E-05, 2.83965E+02, 1.34027E-05],
#      [7.90000E+04, 1.98650E+02, 1.05351E+00, 1.84751E-05, 2.82546E+02, 1.32856E-05],
#      [8.00000E+04, 1.96650E+02, 8.86280E-01, 1.57005E-05, 2.81120E+02, 1.31682E-05],
#      [8.10000E+04, 1.94650E+02, 7.44280E-01, 1.33205E-05, 2.79687E+02, 1.30502E-05],
#      [8.20000E+04, 1.92650E+02, 6.23905E-01, 1.12820E-05, 2.78246E+02, 1.29318E-05],
#      [8.30000E+04, 1.90650E+02, 5.22037E-01, 9.53899E-06, 2.76798E+02, 1.28129E-05],
#      [8.40000E+04, 1.88650E+02, 4.35981E-01, 8.05098E-06, 2.75343E+02, 1.26935E-05],
#      [8.50000E+04, 1.86946E+02, 3.63420E-01, 6.77222E-06, 2.74096E+02, 1.25915E-05],
#      [8.60000E+04, 1.86946E+02, 3.02723E-01, 5.64114E-06, 2.74096E+02, 1.25915E-05]])


from dymos.models.atmosphere.atmos_1976 import USatm1976Data

class TestAtmosphere(unittest.TestCase):

    def test_temperature_comp(self):
        n = 1000

        p = om.Problem(model=om.Group())

        ivc = p.model.add_subsystem('ivc', subsys=om.IndepVarComp(), promotes_outputs=['*'])
        ivc.add_output(name='alt', val=np.linspace(0, 150000, n), units='ft')

        p.model.add_subsystem('atmos', subsys=USatm1976Comp(num_nodes=n))
        p.model.connect('alt', 'atmos.h')

        p.setup(force_alloc_complex=True)
        p.run_model()

        h = p.get_val('alt', units='m')
        T = p.get_val('atmos.temp', units='K')
        P = p.get_val('atmos.pres', units='Pa')
        rho = p.get_val('atmos.rho', units='kg/m**3')
        sos = p.get_val('atmos.sos', units='m/s')

        h = p.get_val('alt', units='ft')
        T = p.get_val('atmos.temp', units='degR')
        P = p.get_val('atmos.pres', units='psi')
        rho = p.get_val('atmos.rho', units='slug/ft**3')
        sos = p.get_val('atmos.sos', units='ft/s')

        import matplotlib.pyplot as plt

        plt.figure()
        plt.suptitle('T vs alt')
        plt.plot(h, T)
        plt.plot(USatm1976Data.alt, USatm1976Data.T, 'k.')

        plt.figure()
        plt.suptitle('P vs alt')
        plt.plot(h, P)
        plt.plot(USatm1976Data.alt, USatm1976Data.P, 'k.')

        plt.figure()
        plt.suptitle(r'$\rho$ vs alt')
        plt.plot(h, rho)
        plt.plot(USatm1976Data.alt, USatm1976Data.rho, 'k.')

        plt.figure()
        plt.suptitle(r'a vs alt')
        plt.plot(h, sos)
        plt.plot(USatm1976Data.alt, USatm1976Data.a, 'k.')

        # plt.plot(h, rho)
        # plt.plot(h, sos)
        plt.show()
        exit(0)

        assert_near_equal(p.get_val('atmos.temp', units='K'),
                          reference[:, 1], tolerance=1.0E-2)
        assert_near_equal(p.get_val('atmos.pres', units='Pa'),
                          reference[:, 2], tolerance=1.0E-2)
        assert_near_equal(p.get_val('atmos.rho', units='kg/m**3'),
                          reference[:, 3], tolerance=1.0E-2)
        assert_near_equal(p.get_val('atmos.sos', units='m/s'),
                          reference[:, 4], tolerance=1.0E-2)

        cpd = p.check_partials(method='cs', out_stream=None)
        assert_check_partials(cpd)


if __name__ == '__main__':  # pragma: no cover
    unittest.main()
